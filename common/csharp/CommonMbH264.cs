/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace org.doubango.thialgou.commonWRAP {

using System;
using System.Runtime.InteropServices;

public class CommonMbH264 : CommonMb {
  private HandleRef swigCPtr;

  internal CommonMbH264(IntPtr cPtr, bool cMemoryOwn) : base(commonWRAPPINVOKE.CommonMbH264_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CommonMbH264 obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CommonMbH264() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          commonWRAPPINVOKE.delete_CommonMbH264(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public CommonMbH264(uint uiAddress, uint uiX, uint uiY) : this(commonWRAPPINVOKE.new_CommonMbH264(uiAddress, uiX, uiY), true) {
  }

  public MbMode getMode() {
    MbMode ret = (MbMode)commonWRAPPINVOKE.CommonMbH264_getMode(swigCPtr);
    return ret;
  }

  public SliceType getSliceType() {
    SliceType ret = (SliceType)commonWRAPPINVOKE.CommonMbH264_getSliceType(swigCPtr);
    return ret;
  }

  public void getIntra4x4PredMode(Intra4x4PredMode[] modes) {
    commonWRAPPINVOKE.CommonMbH264_getIntra4x4PredMode(swigCPtr, modes);
  }

  public IntraChromaPredMode getIntraChromaPredMode() {
    IntraChromaPredMode ret = (IntraChromaPredMode)commonWRAPPINVOKE.CommonMbH264_getIntraChromaPredMode(swigCPtr);
    return ret;
  }

  public void getBlkModes(BlkMode[] modes) {
    commonWRAPPINVOKE.CommonMbH264_getBlkModes(swigCPtr, modes);
  }

  public CommonMvVector getMvdL0() {
    CommonMvVector ret = new CommonMvVector(commonWRAPPINVOKE.CommonMbH264_getMvdL0(swigCPtr), true);
    return ret;
  }

  public CommonMvVector getMvdL1() {
    CommonMvVector ret = new CommonMvVector(commonWRAPPINVOKE.CommonMbH264_getMvdL1(swigCPtr), true);
    return ret;
  }

  public CommonMvVector getMvL0() {
    CommonMvVector ret = new CommonMvVector(commonWRAPPINVOKE.CommonMbH264_getMvL0(swigCPtr), true);
    return ret;
  }

  public CommonMvVector getMvL1() {
    CommonMvVector ret = new CommonMvVector(commonWRAPPINVOKE.CommonMbH264_getMvL1(swigCPtr), true);
    return ret;
  }

  public void getRefIdxL0(int[] values) {
    commonWRAPPINVOKE.CommonMbH264_getRefIdxL0(swigCPtr, values);
  }

  public void getRefIdxL1(int[] values) {
    commonWRAPPINVOKE.CommonMbH264_getRefIdxL1(swigCPtr, values);
  }

  public void getPOC0(int[] values) {
    commonWRAPPINVOKE.CommonMbH264_getPOC0(swigCPtr, values);
  }

  public void getPOC1(int[] values) {
    commonWRAPPINVOKE.CommonMbH264_getPOC1(swigCPtr, values);
  }

  public uint getMbType() {
    uint ret = commonWRAPPINVOKE.CommonMbH264_getMbType(swigCPtr);
    return ret;
  }

  public int getQP() {
    int ret = commonWRAPPINVOKE.CommonMbH264_getQP(swigCPtr);
    return ret;
  }

  public int getQPC() {
    int ret = commonWRAPPINVOKE.CommonMbH264_getQPC(swigCPtr);
    return ret;
  }

  public int getCBP() {
    int ret = commonWRAPPINVOKE.CommonMbH264_getCBP(swigCPtr);
    return ret;
  }

  public bool isInter8x8() {
    bool ret = commonWRAPPINVOKE.CommonMbH264_isInter8x8(swigCPtr);
    return ret;
  }

  public bool isIntra4x4() {
    bool ret = commonWRAPPINVOKE.CommonMbH264_isIntra4x4(swigCPtr);
    return ret;
  }

  public bool isIntra16x16() {
    bool ret = commonWRAPPINVOKE.CommonMbH264_isIntra16x16(swigCPtr);
    return ret;
  }

  public bool isIntra() {
    bool ret = commonWRAPPINVOKE.CommonMbH264_isIntra(swigCPtr);
    return ret;
  }

  public bool isInCropWindow() {
    bool ret = commonWRAPPINVOKE.CommonMbH264_isInCropWindow(swigCPtr);
    return ret;
  }

  public bool isResidualPredictionFlag() {
    bool ret = commonWRAPPINVOKE.CommonMbH264_isResidualPredictionFlag(swigCPtr);
    return ret;
  }

  public bool isBLSkippedFlag() {
    bool ret = commonWRAPPINVOKE.CommonMbH264_isBLSkippedFlag(swigCPtr);
    return ret;
  }

}

}
