/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_commonWRAP(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_commonWRAP(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_commonWRAP(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



#include <stdint.h>		// Use the C99 official header


#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>


#include "../cpp/common_main.h"
#include "../cpp/common_main_h264.h"

SWIGINTERN std::vector< CommonElt > *new_std_vector_Sl_CommonElt_Sg___SWIG_2(int capacity){
        std::vector< CommonElt >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< CommonElt >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN CommonElt std_vector_Sl_CommonElt_Sg__getitemcopy(std::vector< CommonElt > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< CommonElt >::const_reference std_vector_Sl_CommonElt_Sg__getitem(std::vector< CommonElt > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sg__setitem(std::vector< CommonElt > *self,int index,CommonElt const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sg__AddRange(std::vector< CommonElt > *self,std::vector< CommonElt > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< CommonElt > *std_vector_Sl_CommonElt_Sg__GetRange(std::vector< CommonElt > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< CommonElt >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sg__Insert(std::vector< CommonElt > *self,int index,CommonElt const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sg__InsertRange(std::vector< CommonElt > *self,int index,std::vector< CommonElt > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sg__RemoveAt(std::vector< CommonElt > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sg__RemoveRange(std::vector< CommonElt > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< CommonElt > *std_vector_Sl_CommonElt_Sg__Repeat(CommonElt const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< CommonElt >(count, value);
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sg__Reverse__SWIG_0(std::vector< CommonElt > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sg__Reverse__SWIG_1(std::vector< CommonElt > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sg__SetRange(std::vector< CommonElt > *self,int index,std::vector< CommonElt > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< CommonElt * > *new_std_vector_Sl_CommonElt_Sm__Sg___SWIG_2(int capacity){
        std::vector< CommonElt * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< CommonElt * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN CommonElt *std_vector_Sl_CommonElt_Sm__Sg__getitemcopy(std::vector< CommonElt * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< CommonElt * >::const_reference std_vector_Sl_CommonElt_Sm__Sg__getitem(std::vector< CommonElt * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sm__Sg__setitem(std::vector< CommonElt * > *self,int index,CommonElt *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sm__Sg__AddRange(std::vector< CommonElt * > *self,std::vector< CommonElt * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< CommonElt * > *std_vector_Sl_CommonElt_Sm__Sg__GetRange(std::vector< CommonElt * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< CommonElt * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sm__Sg__Insert(std::vector< CommonElt * > *self,int index,CommonElt *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sm__Sg__InsertRange(std::vector< CommonElt * > *self,int index,std::vector< CommonElt * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sm__Sg__RemoveAt(std::vector< CommonElt * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sm__Sg__RemoveRange(std::vector< CommonElt * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< CommonElt * > *std_vector_Sl_CommonElt_Sm__Sg__Repeat(CommonElt *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< CommonElt * >(count, value);
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sm__Sg__Reverse__SWIG_0(std::vector< CommonElt * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sm__Sg__Reverse__SWIG_1(std::vector< CommonElt * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CommonElt_Sm__Sg__SetRange(std::vector< CommonElt * > *self,int index,std::vector< CommonElt * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_CommonElt_Sm__Sg__Contains(std::vector< CommonElt * > *self,CommonElt *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_CommonElt_Sm__Sg__IndexOf(std::vector< CommonElt * > *self,CommonElt *const &value){
        int index = -1;
        std::vector< CommonElt * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_CommonElt_Sm__Sg__LastIndexOf(std::vector< CommonElt * > *self,CommonElt *const &value){
        int index = -1;
        std::vector< CommonElt * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_CommonElt_Sm__Sg__Remove(std::vector< CommonElt * > *self,CommonElt *const &value){
        std::vector< CommonElt * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< CommonMb * > *new_std_vector_Sl_CommonMb_Sm__Sg___SWIG_2(int capacity){
        std::vector< CommonMb * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< CommonMb * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN CommonMb *std_vector_Sl_CommonMb_Sm__Sg__getitemcopy(std::vector< CommonMb * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< CommonMb * >::const_reference std_vector_Sl_CommonMb_Sm__Sg__getitem(std::vector< CommonMb * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonMb_Sm__Sg__setitem(std::vector< CommonMb * > *self,int index,CommonMb *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonMb_Sm__Sg__AddRange(std::vector< CommonMb * > *self,std::vector< CommonMb * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< CommonMb * > *std_vector_Sl_CommonMb_Sm__Sg__GetRange(std::vector< CommonMb * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< CommonMb * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CommonMb_Sm__Sg__Insert(std::vector< CommonMb * > *self,int index,CommonMb *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonMb_Sm__Sg__InsertRange(std::vector< CommonMb * > *self,int index,std::vector< CommonMb * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonMb_Sm__Sg__RemoveAt(std::vector< CommonMb * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonMb_Sm__Sg__RemoveRange(std::vector< CommonMb * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< CommonMb * > *std_vector_Sl_CommonMb_Sm__Sg__Repeat(CommonMb *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< CommonMb * >(count, value);
      }
SWIGINTERN void std_vector_Sl_CommonMb_Sm__Sg__Reverse__SWIG_0(std::vector< CommonMb * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_CommonMb_Sm__Sg__Reverse__SWIG_1(std::vector< CommonMb * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CommonMb_Sm__Sg__SetRange(std::vector< CommonMb * > *self,int index,std::vector< CommonMb * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_CommonMb_Sm__Sg__Contains(std::vector< CommonMb * > *self,CommonMb *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_CommonMb_Sm__Sg__IndexOf(std::vector< CommonMb * > *self,CommonMb *const &value){
        int index = -1;
        std::vector< CommonMb * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_CommonMb_Sm__Sg__LastIndexOf(std::vector< CommonMb * > *self,CommonMb *const &value){
        int index = -1;
        std::vector< CommonMb * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_CommonMb_Sm__Sg__Remove(std::vector< CommonMb * > *self,CommonMb *const &value){
        std::vector< CommonMb * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< CommonMv > *new_std_vector_Sl_CommonMv_Sg___SWIG_2(int capacity){
        std::vector< CommonMv >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< CommonMv >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN CommonMv std_vector_Sl_CommonMv_Sg__getitemcopy(std::vector< CommonMv > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< CommonMv >::const_reference std_vector_Sl_CommonMv_Sg__getitem(std::vector< CommonMv > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonMv_Sg__setitem(std::vector< CommonMv > *self,int index,CommonMv const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonMv_Sg__AddRange(std::vector< CommonMv > *self,std::vector< CommonMv > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< CommonMv > *std_vector_Sl_CommonMv_Sg__GetRange(std::vector< CommonMv > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< CommonMv >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CommonMv_Sg__Insert(std::vector< CommonMv > *self,int index,CommonMv const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonMv_Sg__InsertRange(std::vector< CommonMv > *self,int index,std::vector< CommonMv > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonMv_Sg__RemoveAt(std::vector< CommonMv > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CommonMv_Sg__RemoveRange(std::vector< CommonMv > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< CommonMv > *std_vector_Sl_CommonMv_Sg__Repeat(CommonMv const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< CommonMv >(count, value);
      }
SWIGINTERN void std_vector_Sl_CommonMv_Sg__Reverse__SWIG_0(std::vector< CommonMv > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_CommonMv_Sg__Reverse__SWIG_1(std::vector< CommonMv > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CommonMv_Sg__SetRange(std::vector< CommonMv > *self,int index,std::vector< CommonMv > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "commonWRAP.h"

SwigDirector_CommonMain::SwigDirector_CommonMain() : CommonMain(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_CommonMain::~SwigDirector_CommonMain() {
  
}


int SwigDirector_CommonMain::OnElt(CommonElt const *pcElt) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpcElt = 0 ;
  
  if (!swig_callbackOnElt) {
    return CommonMain::OnElt(pcElt);
  } else {
    jpcElt = (void *) pcElt; 
    jresult = (int) swig_callbackOnElt(jpcElt);
    c_result = (int)jresult; 
  }
  return c_result;
}

unsigned int SwigDirector_CommonMain::getCurrentPictureId() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackgetCurrentPictureId) {
    throw Swig::DirectorPureVirtualException("CommonMain::getCurrentPictureId");
  } else {
    jresult = (unsigned int) swig_callbackgetCurrentPictureId();
    c_result = (unsigned int)jresult; 
  }
  return c_result;
}

unsigned int SwigDirector_CommonMain::getCurrentSliceId() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackgetCurrentSliceId) {
    throw Swig::DirectorPureVirtualException("CommonMain::getCurrentSliceId");
  } else {
    jresult = (unsigned int) swig_callbackgetCurrentSliceId();
    c_result = (unsigned int)jresult; 
  }
  return c_result;
}

unsigned int SwigDirector_CommonMain::getCurrentLayerId() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackgetCurrentLayerId) {
    throw Swig::DirectorPureVirtualException("CommonMain::getCurrentLayerId");
  } else {
    jresult = (unsigned int) swig_callbackgetCurrentLayerId();
    c_result = (unsigned int)jresult; 
  }
  return c_result;
}

void SwigDirector_CommonMain::swig_connect_director(SWIG_Callback0_t callbackOnElt, SWIG_Callback1_t callbackgetCurrentPictureId, SWIG_Callback2_t callbackgetCurrentSliceId, SWIG_Callback3_t callbackgetCurrentLayerId) {
  swig_callbackOnElt = callbackOnElt;
  swig_callbackgetCurrentPictureId = callbackgetCurrentPictureId;
  swig_callbackgetCurrentSliceId = callbackgetCurrentSliceId;
  swig_callbackgetCurrentLayerId = callbackgetCurrentLayerId;
}

void SwigDirector_CommonMain::swig_init_callbacks() {
  swig_callbackOnElt = 0;
  swig_callbackgetCurrentPictureId = 0;
  swig_callbackgetCurrentSliceId = 0;
  swig_callbackgetCurrentLayerId = 0;
}

SwigDirector_CommonMainH264::SwigDirector_CommonMainH264() : CommonMainH264(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_CommonMainH264::~SwigDirector_CommonMainH264() {
  
}


int SwigDirector_CommonMainH264::OnElt(CommonElt const *pcElt) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpcElt = 0 ;
  
  if (!swig_callbackOnElt) {
    return CommonMain::OnElt(pcElt);
  } else {
    jpcElt = (void *) pcElt; 
    jresult = (int) swig_callbackOnElt(jpcElt);
    c_result = (int)jresult; 
  }
  return c_result;
}

unsigned int SwigDirector_CommonMainH264::getCurrentPictureId() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackgetCurrentPictureId) {
    return CommonMainH264::getCurrentPictureId();
  } else {
    jresult = (unsigned int) swig_callbackgetCurrentPictureId();
    c_result = (unsigned int)jresult; 
  }
  return c_result;
}

unsigned int SwigDirector_CommonMainH264::getCurrentSliceId() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackgetCurrentSliceId) {
    return CommonMainH264::getCurrentSliceId();
  } else {
    jresult = (unsigned int) swig_callbackgetCurrentSliceId();
    c_result = (unsigned int)jresult; 
  }
  return c_result;
}

unsigned int SwigDirector_CommonMainH264::getCurrentLayerId() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackgetCurrentLayerId) {
    return CommonMainH264::getCurrentLayerId();
  } else {
    jresult = (unsigned int) swig_callbackgetCurrentLayerId();
    c_result = (unsigned int)jresult; 
  }
  return c_result;
}

void SwigDirector_CommonMainH264::swig_connect_director(SWIG_Callback0_t callbackOnElt, SWIG_Callback1_t callbackgetCurrentPictureId, SWIG_Callback2_t callbackgetCurrentSliceId, SWIG_Callback3_t callbackgetCurrentLayerId) {
  swig_callbackOnElt = callbackOnElt;
  swig_callbackgetCurrentPictureId = callbackgetCurrentPictureId;
  swig_callbackgetCurrentSliceId = callbackgetCurrentSliceId;
  swig_callbackgetCurrentLayerId = callbackgetCurrentLayerId;
}

void SwigDirector_CommonMainH264::swig_init_callbacks() {
  swig_callbackOnElt = 0;
  swig_callbackgetCurrentPictureId = 0;
  swig_callbackgetCurrentSliceId = 0;
  swig_callbackgetCurrentLayerId = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_CommonMv_x_set(void * jarg1, int jarg2) {
  CommonMv *arg1 = (CommonMv *) 0 ;
  int32_t arg2 ;
  
  arg1 = (CommonMv *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonMv_x_get(void * jarg1) {
  int jresult ;
  CommonMv *arg1 = (CommonMv *) 0 ;
  int32_t result;
  
  arg1 = (CommonMv *)jarg1; 
  result = (int32_t) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMv_y_set(void * jarg1, int jarg2) {
  CommonMv *arg1 = (CommonMv *) 0 ;
  int32_t arg2 ;
  
  arg1 = (CommonMv *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonMv_y_get(void * jarg1) {
  int jresult ;
  CommonMv *arg1 = (CommonMv *) 0 ;
  int32_t result;
  
  arg1 = (CommonMv *)jarg1; 
  result = (int32_t) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonMv(void * jarg1) {
  CommonMv *arg1 = (CommonMv *) 0 ;
  
  arg1 = (CommonMv *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonElt(void * jarg1) {
  CommonElt *arg1 = (CommonElt *) 0 ;
  
  arg1 = (CommonElt *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonElt_getType(void * jarg1) {
  int jresult ;
  CommonElt *arg1 = (CommonElt *) 0 ;
  CommonElementType_t result;
  
  arg1 = (CommonElt *)jarg1; 
  result = (CommonElementType_t)((CommonElt const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonElt_getElements(void * jarg1) {
  void * jresult ;
  CommonElt *arg1 = (CommonElt *) 0 ;
  std::vector< CommonElt * > result;
  
  arg1 = (CommonElt *)jarg1; 
  result = ((CommonElt const *)arg1)->getElements();
  jresult = new std::vector< CommonElt * >((const std::vector< CommonElt * > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommonElt_getBitsStart(void * jarg1) {
  char * jresult ;
  CommonElt *arg1 = (CommonElt *) 0 ;
  std::string result;
  
  arg1 = (CommonElt *)jarg1; 
  result = (arg1)->getBitsStart();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommonElt_getBitsVal(void * jarg1) {
  char * jresult ;
  CommonElt *arg1 = (CommonElt *) 0 ;
  std::string result;
  
  arg1 = (CommonElt *)jarg1; 
  result = (arg1)->getBitsVal();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonElt_getBitsCount(void * jarg1) {
  unsigned int jresult ;
  CommonElt *arg1 = (CommonElt *) 0 ;
  unsigned int result;
  
  arg1 = (CommonElt *)jarg1; 
  result = (unsigned int)(arg1)->getBitsCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonSyntax(char * jarg1, char * jarg2, double jarg3) {
  void * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  double arg3 ;
  CommonSyntax *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (double)jarg3; 
  result = (CommonSyntax *)new CommonSyntax(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonSyntax(void * jarg1) {
  CommonSyntax *arg1 = (CommonSyntax *) 0 ;
  
  arg1 = (CommonSyntax *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommonSyntax_getName(void * jarg1) {
  char * jresult ;
  CommonSyntax *arg1 = (CommonSyntax *) 0 ;
  std::string result;
  
  arg1 = (CommonSyntax *)jarg1; 
  result = (arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommonSyntax_getDescriptor(void * jarg1) {
  char * jresult ;
  CommonSyntax *arg1 = (CommonSyntax *) 0 ;
  std::string result;
  
  arg1 = (CommonSyntax *)jarg1; 
  result = (arg1)->getDescriptor();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CommonSyntax_getValue(void * jarg1) {
  double jresult ;
  CommonSyntax *arg1 = (CommonSyntax *) 0 ;
  double result;
  
  arg1 = (CommonSyntax *)jarg1; 
  result = (double)(arg1)->getValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonHeader(int jarg1, char * jarg2) {
  void * jresult ;
  CommonHeaderType_t arg1 ;
  std::string arg2 ;
  CommonHeader *result = 0 ;
  
  arg1 = (CommonHeaderType_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (CommonHeader *)new CommonHeader(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonHeader(void * jarg1) {
  CommonHeader *arg1 = (CommonHeader *) 0 ;
  
  arg1 = (CommonHeader *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonHeader_getHeaderType(void * jarg1) {
  int jresult ;
  CommonHeader *arg1 = (CommonHeader *) 0 ;
  CommonHeaderType_t result;
  
  arg1 = (CommonHeader *)jarg1; 
  result = (CommonHeaderType_t)(arg1)->getHeaderType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommonHeader_getFuncName(void * jarg1) {
  char * jresult ;
  CommonHeader *arg1 = (CommonHeader *) 0 ;
  std::string result;
  
  arg1 = (CommonHeader *)jarg1; 
  result = (arg1)->getFuncName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonFunction(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  CommonFunction *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (CommonFunction *)new CommonFunction(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonFunction(void * jarg1) {
  CommonFunction *arg1 = (CommonFunction *) 0 ;
  
  arg1 = (CommonFunction *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommonFunction_getFuncName(void * jarg1) {
  char * jresult ;
  CommonFunction *arg1 = (CommonFunction *) 0 ;
  std::string result;
  
  arg1 = (CommonFunction *)jarg1; 
  result = (arg1)->getFuncName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonControl(char * jarg1, char * jarg2, double jarg3) {
  void * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  double arg3 ;
  CommonControl *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (double)jarg3; 
  result = (CommonControl *)new CommonControl(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonControl(void * jarg1) {
  CommonControl *arg1 = (CommonControl *) 0 ;
  
  arg1 = (CommonControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommonControl_getName(void * jarg1) {
  char * jresult ;
  CommonControl *arg1 = (CommonControl *) 0 ;
  std::string result;
  
  arg1 = (CommonControl *)jarg1; 
  result = (arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommonControl_getExpression(void * jarg1) {
  char * jresult ;
  CommonControl *arg1 = (CommonControl *) 0 ;
  std::string result;
  
  arg1 = (CommonControl *)jarg1; 
  result = (arg1)->getExpression();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CommonControl_getValue(void * jarg1) {
  double jresult ;
  CommonControl *arg1 = (CommonControl *) 0 ;
  double result;
  
  arg1 = (CommonControl *)jarg1; 
  result = (double)(arg1)->getValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonError(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  CommonError *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (CommonError *)new CommonError(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonError(void * jarg1) {
  CommonError *arg1 = (CommonError *) 0 ;
  
  arg1 = (CommonError *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CommonError_getDescription(void * jarg1) {
  char * jresult ;
  CommonError *arg1 = (CommonError *) 0 ;
  std::string result;
  
  arg1 = (CommonError *)jarg1; 
  result = (arg1)->getDescription();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonMb__SWIG_0(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, int jarg4) {
  void * jresult ;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  CommonEltMbType_t arg4 ;
  CommonMb *result = 0 ;
  
  arg1 = (uint32_t)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (CommonEltMbType_t)jarg4; 
  result = (CommonMb *)new CommonMb(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonMb__SWIG_1(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  CommonMb *result = 0 ;
  
  arg1 = (uint32_t)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (CommonMb *)new CommonMb(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonMb(void * jarg1) {
  CommonMb *arg1 = (CommonMb *) 0 ;
  
  arg1 = (CommonMb *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonMb_getData(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  CommonMb *arg1 = (CommonMb *) 0 ;
  CommonEltMbDataType_t arg2 ;
  CommonYuvLine_t arg3 ;
  Int32Ptr result;
  
  arg1 = (CommonMb *)jarg1; 
  arg2 = (CommonEltMbDataType_t)jarg2; 
  arg3 = (CommonYuvLine_t)jarg3; 
  result = (Int32Ptr)(arg1)->getData(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonMb_getMbType(void * jarg1) {
  int jresult ;
  CommonMb *arg1 = (CommonMb *) 0 ;
  CommonEltMbType_t result;
  
  arg1 = (CommonMb *)jarg1; 
  result = (CommonEltMbType_t)((CommonMb const *)arg1)->getMbType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMb_getAddress(void * jarg1) {
  unsigned int jresult ;
  CommonMb *arg1 = (CommonMb *) 0 ;
  uint32_t result;
  
  arg1 = (CommonMb *)jarg1; 
  result = (uint32_t)((CommonMb const *)arg1)->getAddress();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMb_getX(void * jarg1) {
  unsigned int jresult ;
  CommonMb *arg1 = (CommonMb *) 0 ;
  uint32_t result;
  
  arg1 = (CommonMb *)jarg1; 
  result = (uint32_t)((CommonMb const *)arg1)->getX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMb_getY(void * jarg1) {
  unsigned int jresult ;
  CommonMb *arg1 = (CommonMb *) 0 ;
  uint32_t result;
  
  arg1 = (CommonMb *)jarg1; 
  result = (uint32_t)((CommonMb const *)arg1)->getY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMb_getWidth(void * jarg1, int jarg2) {
  unsigned int jresult ;
  CommonMb *arg1 = (CommonMb *) 0 ;
  CommonYuvLine_t arg2 ;
  uint32_t result;
  
  arg1 = (CommonMb *)jarg1; 
  arg2 = (CommonYuvLine_t)jarg2; 
  result = (uint32_t)(arg1)->getWidth(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMb_getHeight(void * jarg1, int jarg2) {
  unsigned int jresult ;
  CommonMb *arg1 = (CommonMb *) 0 ;
  CommonYuvLine_t arg2 ;
  uint32_t result;
  
  arg1 = (CommonMb *)jarg1; 
  arg2 = (CommonYuvLine_t)jarg2; 
  result = (uint32_t)(arg1)->getHeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonMain() {
  void * jresult ;
  CommonMain *result = 0 ;
  
  result = (CommonMain *)new SwigDirector_CommonMain();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonMain(void * jarg1) {
  CommonMain *arg1 = (CommonMain *) 0 ;
  
  arg1 = (CommonMain *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonMain_OnElt(void * jarg1, void * jarg2) {
  int jresult ;
  CommonMain *arg1 = (CommonMain *) 0 ;
  CommonElt *arg2 = (CommonElt *) 0 ;
  int result;
  
  arg1 = (CommonMain *)jarg1; 
  arg2 = (CommonElt *)jarg2; 
  result = (int)((CommonMain const *)arg1)->OnElt((CommonElt const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonMain_OnEltSwigExplicitCommonMain(void * jarg1, void * jarg2) {
  int jresult ;
  CommonMain *arg1 = (CommonMain *) 0 ;
  CommonElt *arg2 = (CommonElt *) 0 ;
  int result;
  
  arg1 = (CommonMain *)jarg1; 
  arg2 = (CommonElt *)jarg2; 
  result = (int)((CommonMain const *)arg1)->CommonMain::OnElt((CommonElt const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMain_getCurrentPictureId(void * jarg1) {
  unsigned int jresult ;
  CommonMain *arg1 = (CommonMain *) 0 ;
  unsigned int result;
  
  arg1 = (CommonMain *)jarg1; 
  result = (unsigned int)((CommonMain const *)arg1)->getCurrentPictureId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMain_getCurrentSliceId(void * jarg1) {
  unsigned int jresult ;
  CommonMain *arg1 = (CommonMain *) 0 ;
  unsigned int result;
  
  arg1 = (CommonMain *)jarg1; 
  result = (unsigned int)((CommonMain const *)arg1)->getCurrentSliceId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMain_getCurrentLayerId(void * jarg1) {
  unsigned int jresult ;
  CommonMain *arg1 = (CommonMain *) 0 ;
  unsigned int result;
  
  arg1 = (CommonMain *)jarg1; 
  result = (unsigned int)((CommonMain const *)arg1)->getCurrentLayerId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMain_setMainH264(void * jarg1) {
  CommonMainH264 *arg1 = (CommonMainH264 *) 0 ;
  
  arg1 = (CommonMainH264 *)jarg1; 
  CommonMain::setMainH264((CommonMainH264 const *)arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonMain_getMainH264() {
  void * jresult ;
  CommonMainH264 *result = 0 ;
  
  result = (CommonMainH264 *)CommonMain::getMainH264();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonMain_getMain() {
  void * jresult ;
  CommonMain *result = 0 ;
  
  result = (CommonMain *)CommonMain::getMain();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMain_director_connect(void *objarg, SwigDirector_CommonMain::SWIG_Callback0_t callback0, SwigDirector_CommonMain::SWIG_Callback1_t callback1, SwigDirector_CommonMain::SWIG_Callback2_t callback2, SwigDirector_CommonMain::SWIG_Callback3_t callback3) {
  CommonMain *obj = (CommonMain *)objarg;
  SwigDirector_CommonMain *director = dynamic_cast<SwigDirector_CommonMain *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_COMMON_MAX_TRACE_LAYERS_get() {
  int jresult ;
  int result;
  
  result = (int)((16*8+3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COMMON_MAX_BITS_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)(128);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COMMON_MAX_LINE_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)(1024);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonMbH264(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  CommonMbH264 *result = 0 ;
  
  arg1 = (uint32_t)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (CommonMbH264 *)new CommonMbH264(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonMbH264(void * jarg1) {
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  
  arg1 = (CommonMbH264 *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonMbH264_getMode(void * jarg1) {
  int jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  MbModeFake result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = (MbModeFake)((CommonMbH264 const *)arg1)->getMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonMbH264_getSliceType(void * jarg1) {
  int jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  SliceTypeFake result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = (SliceTypeFake)((CommonMbH264 const *)arg1)->getSliceType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbH264_getIntra4x4PredMode(void * jarg1, Intra4x4PredModeFake* jarg2) {
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  Intra4x4PredModeFake *arg2 = (Intra4x4PredModeFake *) 0 ;
  
  arg1 = (CommonMbH264 *)jarg1; 
  arg2 = jarg2;
  ((CommonMbH264 const *)arg1)->getIntra4x4PredMode(arg2);
  
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonMbH264_getIntraChromaPredMode(void * jarg1) {
  int jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  IntraChromaPredModeFake result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = (IntraChromaPredModeFake)((CommonMbH264 const *)arg1)->getIntraChromaPredMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbH264_getBlkModes(void * jarg1, BlkModeFake* jarg2) {
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  BlkModeFake *arg2 = (BlkModeFake *) 0 ;
  
  arg1 = (CommonMbH264 *)jarg1; 
  arg2 = jarg2;
  ((CommonMbH264 const *)arg1)->getBlkModes(arg2);
  
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonMbH264_getMvdL0(void * jarg1) {
  void * jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  std::vector< CommonMv > result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = ((CommonMbH264 const *)arg1)->getMvdL0();
  jresult = new std::vector< CommonMv >((const std::vector< CommonMv > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonMbH264_getMvdL1(void * jarg1) {
  void * jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  std::vector< CommonMv > result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = ((CommonMbH264 const *)arg1)->getMvdL1();
  jresult = new std::vector< CommonMv >((const std::vector< CommonMv > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonMbH264_getMvL0(void * jarg1) {
  void * jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  std::vector< CommonMv > result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = ((CommonMbH264 const *)arg1)->getMvL0();
  jresult = new std::vector< CommonMv >((const std::vector< CommonMv > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonMbH264_getMvL1(void * jarg1) {
  void * jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  std::vector< CommonMv > result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = ((CommonMbH264 const *)arg1)->getMvL1();
  jresult = new std::vector< CommonMv >((const std::vector< CommonMv > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbH264_getRefIdxL0(void * jarg1, int* jarg2) {
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  
  arg1 = (CommonMbH264 *)jarg1; 
  arg2 = jarg2;
  ((CommonMbH264 const *)arg1)->getRefIdxL0(arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbH264_getRefIdxL1(void * jarg1, int* jarg2) {
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  
  arg1 = (CommonMbH264 *)jarg1; 
  arg2 = jarg2;
  ((CommonMbH264 const *)arg1)->getRefIdxL1(arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbH264_getPOC0(void * jarg1, int* jarg2) {
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  
  arg1 = (CommonMbH264 *)jarg1; 
  arg2 = jarg2;
  ((CommonMbH264 const *)arg1)->getPOC0(arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbH264_getPOC1(void * jarg1, int* jarg2) {
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  
  arg1 = (CommonMbH264 *)jarg1; 
  arg2 = jarg2;
  ((CommonMbH264 const *)arg1)->getPOC1(arg2);
  
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMbH264_getMbType(void * jarg1) {
  unsigned int jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  uint32_t result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = (uint32_t)((CommonMbH264 const *)arg1)->getMbType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonMbH264_getQP(void * jarg1) {
  int jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  int32_t result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = (int32_t)((CommonMbH264 const *)arg1)->getQP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonMbH264_getQPC(void * jarg1) {
  int jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  int32_t result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = (int32_t)((CommonMbH264 const *)arg1)->getQPC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonMbH264_getCBP(void * jarg1) {
  int jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  int32_t result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = (int32_t)((CommonMbH264 const *)arg1)->getCBP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMbH264_isInter8x8(void * jarg1) {
  unsigned int jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  bool result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = (bool)((CommonMbH264 const *)arg1)->isInter8x8();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMbH264_isIntra4x4(void * jarg1) {
  unsigned int jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  bool result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = (bool)((CommonMbH264 const *)arg1)->isIntra4x4();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMbH264_isIntra16x16(void * jarg1) {
  unsigned int jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  bool result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = (bool)((CommonMbH264 const *)arg1)->isIntra16x16();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMbH264_isIntra(void * jarg1) {
  unsigned int jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  bool result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = (bool)((CommonMbH264 const *)arg1)->isIntra();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMbH264_isInCropWindow(void * jarg1) {
  unsigned int jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  bool result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = (bool)((CommonMbH264 const *)arg1)->isInCropWindow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMbH264_isResidualPredictionFlag(void * jarg1) {
  unsigned int jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  bool result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = (bool)((CommonMbH264 const *)arg1)->isResidualPredictionFlag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMbH264_isBLSkippedFlag(void * jarg1) {
  unsigned int jresult ;
  CommonMbH264 *arg1 = (CommonMbH264 *) 0 ;
  bool result;
  
  arg1 = (CommonMbH264 *)jarg1; 
  result = (bool)((CommonMbH264 const *)arg1)->isBLSkippedFlag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonH264Section(void * jarg1) {
  CommonH264Section *arg1 = (CommonH264Section *) 0 ;
  
  arg1 = (CommonH264Section *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonH264Nalu(void * jarg1) {
  CommonH264Nalu *arg1 = (CommonH264Nalu *) 0 ;
  
  arg1 = (CommonH264Nalu *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonH264Nalu_getNaluType(void * jarg1) {
  int jresult ;
  CommonH264Nalu *arg1 = (CommonH264Nalu *) 0 ;
  enum NalUnitType result;
  
  arg1 = (CommonH264Nalu *)jarg1; 
  result = (enum NalUnitType)(arg1)->getNaluType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonH264Nalu_getLayerId(void * jarg1) {
  unsigned int jresult ;
  CommonH264Nalu *arg1 = (CommonH264Nalu *) 0 ;
  unsigned int result;
  
  arg1 = (CommonH264Nalu *)jarg1; 
  result = (unsigned int)((CommonH264Nalu const *)arg1)->getLayerId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonH264Nalu_getPictureId(void * jarg1) {
  unsigned int jresult ;
  CommonH264Nalu *arg1 = (CommonH264Nalu *) 0 ;
  unsigned int result;
  
  arg1 = (CommonH264Nalu *)jarg1; 
  result = (unsigned int)((CommonH264Nalu const *)arg1)->getPictureId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonH264Nalu_getSliceId(void * jarg1) {
  unsigned int jresult ;
  CommonH264Nalu *arg1 = (CommonH264Nalu *) 0 ;
  unsigned int result;
  
  arg1 = (CommonH264Nalu *)jarg1; 
  result = (unsigned int)((CommonH264Nalu const *)arg1)->getSliceId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonMainH264() {
  void * jresult ;
  CommonMainH264 *result = 0 ;
  
  result = (CommonMainH264 *)new SwigDirector_CommonMainH264();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonMainH264(void * jarg1) {
  CommonMainH264 *arg1 = (CommonMainH264 *) 0 ;
  
  arg1 = (CommonMainH264 *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMainH264_getCurrentPictureId(void * jarg1) {
  unsigned int jresult ;
  CommonMainH264 *arg1 = (CommonMainH264 *) 0 ;
  unsigned int result;
  
  arg1 = (CommonMainH264 *)jarg1; 
  result = (unsigned int)((CommonMainH264 const *)arg1)->getCurrentPictureId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMainH264_getCurrentPictureIdSwigExplicitCommonMainH264(void * jarg1) {
  unsigned int jresult ;
  CommonMainH264 *arg1 = (CommonMainH264 *) 0 ;
  unsigned int result;
  
  arg1 = (CommonMainH264 *)jarg1; 
  result = (unsigned int)((CommonMainH264 const *)arg1)->CommonMainH264::getCurrentPictureId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMainH264_getCurrentSliceId(void * jarg1) {
  unsigned int jresult ;
  CommonMainH264 *arg1 = (CommonMainH264 *) 0 ;
  unsigned int result;
  
  arg1 = (CommonMainH264 *)jarg1; 
  result = (unsigned int)((CommonMainH264 const *)arg1)->getCurrentSliceId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMainH264_getCurrentSliceIdSwigExplicitCommonMainH264(void * jarg1) {
  unsigned int jresult ;
  CommonMainH264 *arg1 = (CommonMainH264 *) 0 ;
  unsigned int result;
  
  arg1 = (CommonMainH264 *)jarg1; 
  result = (unsigned int)((CommonMainH264 const *)arg1)->CommonMainH264::getCurrentSliceId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMainH264_getCurrentLayerId(void * jarg1) {
  unsigned int jresult ;
  CommonMainH264 *arg1 = (CommonMainH264 *) 0 ;
  unsigned int result;
  
  arg1 = (CommonMainH264 *)jarg1; 
  result = (unsigned int)((CommonMainH264 const *)arg1)->getCurrentLayerId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMainH264_getCurrentLayerIdSwigExplicitCommonMainH264(void * jarg1) {
  unsigned int jresult ;
  CommonMainH264 *arg1 = (CommonMainH264 *) 0 ;
  unsigned int result;
  
  arg1 = (CommonMainH264 *)jarg1; 
  result = (unsigned int)((CommonMainH264 const *)arg1)->CommonMainH264::getCurrentLayerId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMainH264_director_connect(void *objarg, SwigDirector_CommonMainH264::SWIG_Callback0_t callback0, SwigDirector_CommonMainH264::SWIG_Callback1_t callback1, SwigDirector_CommonMainH264::SWIG_Callback2_t callback2, SwigDirector_CommonMainH264::SWIG_Callback3_t callback3) {
  CommonMainH264 *obj = (CommonMainH264 *)objarg;
  SwigDirector_CommonMainH264 *director = dynamic_cast<SwigDirector_CommonMainH264 *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVector_Clear(void * jarg1) {
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVector_Add(void * jarg1, void * jarg2) {
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  CommonElt *arg2 = 0 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  arg2 = (CommonElt *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CommonElt const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((CommonElt const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CommonEltVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  std::vector< CommonElt >::size_type result;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  result = ((std::vector< CommonElt > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CommonEltVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  std::vector< CommonElt >::size_type result;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  result = ((std::vector< CommonElt > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  std::vector< CommonElt >::size_type arg2 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  arg2 = (std::vector< CommonElt >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonEltVector__SWIG_0() {
  void * jresult ;
  std::vector< CommonElt > *result = 0 ;
  
  result = (std::vector< CommonElt > *)new std::vector< CommonElt >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonEltVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< CommonElt > *arg1 = 0 ;
  std::vector< CommonElt > *result = 0 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonElt > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< CommonElt > *)new std::vector< CommonElt >((std::vector< CommonElt > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonEltVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< CommonElt > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< CommonElt > *)new_std_vector_Sl_CommonElt_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonEltVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  int arg2 ;
  SwigValueWrapper< CommonElt > result;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_CommonElt_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new CommonElt((const CommonElt &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonEltVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  int arg2 ;
  CommonElt *result = 0 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (CommonElt *) &std_vector_Sl_CommonElt_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  int arg2 ;
  CommonElt *arg3 = 0 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CommonElt *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CommonElt const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CommonElt_Sg__setitem(arg1,arg2,(CommonElt const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  std::vector< CommonElt > *arg2 = 0 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  arg2 = (std::vector< CommonElt > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonElt > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_CommonElt_Sg__AddRange(arg1,(std::vector< CommonElt > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonEltVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< CommonElt > *result = 0 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< CommonElt > *)std_vector_Sl_CommonElt_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  int arg2 ;
  CommonElt *arg3 = 0 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CommonElt *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CommonElt const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CommonElt_Sg__Insert(arg1,arg2,(CommonElt const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  int arg2 ;
  std::vector< CommonElt > *arg3 = 0 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CommonElt > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonElt > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CommonElt_Sg__InsertRange(arg1,arg2,(std::vector< CommonElt > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_CommonElt_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_CommonElt_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonEltVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  CommonElt *arg1 = 0 ;
  int arg2 ;
  std::vector< CommonElt > *result = 0 ;
  
  arg1 = (CommonElt *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CommonElt const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< CommonElt > *)std_vector_Sl_CommonElt_Sg__Repeat((CommonElt const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  std_vector_Sl_CommonElt_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_CommonElt_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  int arg2 ;
  std::vector< CommonElt > *arg3 = 0 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CommonElt > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonElt > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CommonElt_Sg__SetRange(arg1,arg2,(std::vector< CommonElt > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonEltVector(void * jarg1) {
  std::vector< CommonElt > *arg1 = (std::vector< CommonElt > *) 0 ;
  
  arg1 = (std::vector< CommonElt > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVectorPtr_Clear(void * jarg1) {
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVectorPtr_Add(void * jarg1, void * jarg2) {
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  CommonElt **arg2 = 0 ;
  CommonElt *temp2 = 0 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  temp2 = (CommonElt *)jarg2;
  arg2 = (CommonElt **)&temp2; 
  (arg1)->push_back((CommonElt *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CommonEltVectorPtr_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  std::vector< CommonElt * >::size_type result;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  result = ((std::vector< CommonElt * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CommonEltVectorPtr_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  std::vector< CommonElt * >::size_type result;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  result = ((std::vector< CommonElt * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVectorPtr_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  std::vector< CommonElt * >::size_type arg2 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  arg2 = (std::vector< CommonElt * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonEltVectorPtr__SWIG_0() {
  void * jresult ;
  std::vector< CommonElt * > *result = 0 ;
  
  result = (std::vector< CommonElt * > *)new std::vector< CommonElt * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonEltVectorPtr__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< CommonElt * > *arg1 = 0 ;
  std::vector< CommonElt * > *result = 0 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonElt * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< CommonElt * > *)new std::vector< CommonElt * >((std::vector< CommonElt * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonEltVectorPtr__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< CommonElt * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< CommonElt * > *)new_std_vector_Sl_CommonElt_Sm__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonEltVectorPtr_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  int arg2 ;
  CommonElt *result = 0 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (CommonElt *)std_vector_Sl_CommonElt_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonEltVectorPtr_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  int arg2 ;
  CommonElt **result = 0 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (CommonElt **) &std_vector_Sl_CommonElt_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVectorPtr_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  int arg2 ;
  CommonElt **arg3 = 0 ;
  CommonElt *temp3 = 0 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (CommonElt *)jarg3;
  arg3 = (CommonElt **)&temp3; 
  try {
    std_vector_Sl_CommonElt_Sm__Sg__setitem(arg1,arg2,(CommonElt *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVectorPtr_AddRange(void * jarg1, void * jarg2) {
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  std::vector< CommonElt * > *arg2 = 0 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  arg2 = (std::vector< CommonElt * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonElt * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_CommonElt_Sm__Sg__AddRange(arg1,(std::vector< CommonElt * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonEltVectorPtr_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< CommonElt * > *result = 0 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< CommonElt * > *)std_vector_Sl_CommonElt_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVectorPtr_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  int arg2 ;
  CommonElt **arg3 = 0 ;
  CommonElt *temp3 = 0 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (CommonElt *)jarg3;
  arg3 = (CommonElt **)&temp3; 
  try {
    std_vector_Sl_CommonElt_Sm__Sg__Insert(arg1,arg2,(CommonElt *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVectorPtr_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  int arg2 ;
  std::vector< CommonElt * > *arg3 = 0 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CommonElt * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonElt * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CommonElt_Sm__Sg__InsertRange(arg1,arg2,(std::vector< CommonElt * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVectorPtr_RemoveAt(void * jarg1, int jarg2) {
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_CommonElt_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVectorPtr_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_CommonElt_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonEltVectorPtr_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  CommonElt **arg1 = 0 ;
  int arg2 ;
  CommonElt *temp1 = 0 ;
  std::vector< CommonElt * > *result = 0 ;
  
  temp1 = (CommonElt *)jarg1;
  arg1 = (CommonElt **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< CommonElt * > *)std_vector_Sl_CommonElt_Sm__Sg__Repeat((CommonElt *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVectorPtr_Reverse__SWIG_0(void * jarg1) {
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  std_vector_Sl_CommonElt_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVectorPtr_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_CommonElt_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonEltVectorPtr_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  int arg2 ;
  std::vector< CommonElt * > *arg3 = 0 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CommonElt * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonElt * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CommonElt_Sm__Sg__SetRange(arg1,arg2,(std::vector< CommonElt * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonEltVectorPtr_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  CommonElt **arg2 = 0 ;
  CommonElt *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  temp2 = (CommonElt *)jarg2;
  arg2 = (CommonElt **)&temp2; 
  result = (bool)std_vector_Sl_CommonElt_Sm__Sg__Contains(arg1,(CommonElt *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonEltVectorPtr_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  CommonElt **arg2 = 0 ;
  CommonElt *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  temp2 = (CommonElt *)jarg2;
  arg2 = (CommonElt **)&temp2; 
  result = (int)std_vector_Sl_CommonElt_Sm__Sg__IndexOf(arg1,(CommonElt *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonEltVectorPtr_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  CommonElt **arg2 = 0 ;
  CommonElt *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  temp2 = (CommonElt *)jarg2;
  arg2 = (CommonElt **)&temp2; 
  result = (int)std_vector_Sl_CommonElt_Sm__Sg__LastIndexOf(arg1,(CommonElt *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonEltVectorPtr_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  CommonElt **arg2 = 0 ;
  CommonElt *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  temp2 = (CommonElt *)jarg2;
  arg2 = (CommonElt **)&temp2; 
  result = (bool)std_vector_Sl_CommonElt_Sm__Sg__Remove(arg1,(CommonElt *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonEltVectorPtr(void * jarg1) {
  std::vector< CommonElt * > *arg1 = (std::vector< CommonElt * > *) 0 ;
  
  arg1 = (std::vector< CommonElt * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbVectorPtr_Clear(void * jarg1) {
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbVectorPtr_Add(void * jarg1, void * jarg2) {
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  CommonMb **arg2 = 0 ;
  CommonMb *temp2 = 0 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  temp2 = (CommonMb *)jarg2;
  arg2 = (CommonMb **)&temp2; 
  (arg1)->push_back((CommonMb *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CommonMbVectorPtr_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  std::vector< CommonMb * >::size_type result;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  result = ((std::vector< CommonMb * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CommonMbVectorPtr_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  std::vector< CommonMb * >::size_type result;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  result = ((std::vector< CommonMb * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbVectorPtr_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  std::vector< CommonMb * >::size_type arg2 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  arg2 = (std::vector< CommonMb * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonMbVectorPtr__SWIG_0() {
  void * jresult ;
  std::vector< CommonMb * > *result = 0 ;
  
  result = (std::vector< CommonMb * > *)new std::vector< CommonMb * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonMbVectorPtr__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< CommonMb * > *arg1 = 0 ;
  std::vector< CommonMb * > *result = 0 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonMb * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< CommonMb * > *)new std::vector< CommonMb * >((std::vector< CommonMb * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonMbVectorPtr__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< CommonMb * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< CommonMb * > *)new_std_vector_Sl_CommonMb_Sm__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonMbVectorPtr_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  int arg2 ;
  CommonMb *result = 0 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (CommonMb *)std_vector_Sl_CommonMb_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonMbVectorPtr_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  int arg2 ;
  CommonMb **result = 0 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (CommonMb **) &std_vector_Sl_CommonMb_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbVectorPtr_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  int arg2 ;
  CommonMb **arg3 = 0 ;
  CommonMb *temp3 = 0 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (CommonMb *)jarg3;
  arg3 = (CommonMb **)&temp3; 
  try {
    std_vector_Sl_CommonMb_Sm__Sg__setitem(arg1,arg2,(CommonMb *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbVectorPtr_AddRange(void * jarg1, void * jarg2) {
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  std::vector< CommonMb * > *arg2 = 0 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  arg2 = (std::vector< CommonMb * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonMb * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_CommonMb_Sm__Sg__AddRange(arg1,(std::vector< CommonMb * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonMbVectorPtr_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< CommonMb * > *result = 0 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< CommonMb * > *)std_vector_Sl_CommonMb_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbVectorPtr_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  int arg2 ;
  CommonMb **arg3 = 0 ;
  CommonMb *temp3 = 0 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (CommonMb *)jarg3;
  arg3 = (CommonMb **)&temp3; 
  try {
    std_vector_Sl_CommonMb_Sm__Sg__Insert(arg1,arg2,(CommonMb *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbVectorPtr_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  int arg2 ;
  std::vector< CommonMb * > *arg3 = 0 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CommonMb * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonMb * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CommonMb_Sm__Sg__InsertRange(arg1,arg2,(std::vector< CommonMb * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbVectorPtr_RemoveAt(void * jarg1, int jarg2) {
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_CommonMb_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbVectorPtr_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_CommonMb_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonMbVectorPtr_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  CommonMb **arg1 = 0 ;
  int arg2 ;
  CommonMb *temp1 = 0 ;
  std::vector< CommonMb * > *result = 0 ;
  
  temp1 = (CommonMb *)jarg1;
  arg1 = (CommonMb **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< CommonMb * > *)std_vector_Sl_CommonMb_Sm__Sg__Repeat((CommonMb *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbVectorPtr_Reverse__SWIG_0(void * jarg1) {
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  std_vector_Sl_CommonMb_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbVectorPtr_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_CommonMb_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMbVectorPtr_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  int arg2 ;
  std::vector< CommonMb * > *arg3 = 0 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CommonMb * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonMb * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CommonMb_Sm__Sg__SetRange(arg1,arg2,(std::vector< CommonMb * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMbVectorPtr_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  CommonMb **arg2 = 0 ;
  CommonMb *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  temp2 = (CommonMb *)jarg2;
  arg2 = (CommonMb **)&temp2; 
  result = (bool)std_vector_Sl_CommonMb_Sm__Sg__Contains(arg1,(CommonMb *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonMbVectorPtr_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  CommonMb **arg2 = 0 ;
  CommonMb *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  temp2 = (CommonMb *)jarg2;
  arg2 = (CommonMb **)&temp2; 
  result = (int)std_vector_Sl_CommonMb_Sm__Sg__IndexOf(arg1,(CommonMb *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommonMbVectorPtr_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  CommonMb **arg2 = 0 ;
  CommonMb *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  temp2 = (CommonMb *)jarg2;
  arg2 = (CommonMb **)&temp2; 
  result = (int)std_vector_Sl_CommonMb_Sm__Sg__LastIndexOf(arg1,(CommonMb *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommonMbVectorPtr_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  CommonMb **arg2 = 0 ;
  CommonMb *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  temp2 = (CommonMb *)jarg2;
  arg2 = (CommonMb **)&temp2; 
  result = (bool)std_vector_Sl_CommonMb_Sm__Sg__Remove(arg1,(CommonMb *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonMbVectorPtr(void * jarg1) {
  std::vector< CommonMb * > *arg1 = (std::vector< CommonMb * > *) 0 ;
  
  arg1 = (std::vector< CommonMb * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMvVector_Clear(void * jarg1) {
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMvVector_Add(void * jarg1, void * jarg2) {
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  CommonMv *arg2 = 0 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  arg2 = (CommonMv *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CommonMv const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((CommonMv const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CommonMvVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  std::vector< CommonMv >::size_type result;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  result = ((std::vector< CommonMv > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CommonMvVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  std::vector< CommonMv >::size_type result;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  result = ((std::vector< CommonMv > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMvVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  std::vector< CommonMv >::size_type arg2 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  arg2 = (std::vector< CommonMv >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonMvVector__SWIG_0() {
  void * jresult ;
  std::vector< CommonMv > *result = 0 ;
  
  result = (std::vector< CommonMv > *)new std::vector< CommonMv >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonMvVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< CommonMv > *arg1 = 0 ;
  std::vector< CommonMv > *result = 0 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonMv > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< CommonMv > *)new std::vector< CommonMv >((std::vector< CommonMv > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommonMvVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< CommonMv > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< CommonMv > *)new_std_vector_Sl_CommonMv_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonMvVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  int arg2 ;
  CommonMv result;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_CommonMv_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new CommonMv((const CommonMv &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonMvVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  int arg2 ;
  CommonMv *result = 0 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (CommonMv *) &std_vector_Sl_CommonMv_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMvVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  int arg2 ;
  CommonMv *arg3 = 0 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CommonMv *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CommonMv const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CommonMv_Sg__setitem(arg1,arg2,(CommonMv const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMvVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  std::vector< CommonMv > *arg2 = 0 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  arg2 = (std::vector< CommonMv > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonMv > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_CommonMv_Sg__AddRange(arg1,(std::vector< CommonMv > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonMvVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< CommonMv > *result = 0 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< CommonMv > *)std_vector_Sl_CommonMv_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMvVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  int arg2 ;
  CommonMv *arg3 = 0 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CommonMv *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CommonMv const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CommonMv_Sg__Insert(arg1,arg2,(CommonMv const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMvVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  int arg2 ;
  std::vector< CommonMv > *arg3 = 0 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CommonMv > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonMv > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CommonMv_Sg__InsertRange(arg1,arg2,(std::vector< CommonMv > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMvVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_CommonMv_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMvVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_CommonMv_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CommonMvVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  CommonMv *arg1 = 0 ;
  int arg2 ;
  std::vector< CommonMv > *result = 0 ;
  
  arg1 = (CommonMv *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CommonMv const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< CommonMv > *)std_vector_Sl_CommonMv_Sg__Repeat((CommonMv const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMvVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  std_vector_Sl_CommonMv_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMvVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_CommonMv_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommonMvVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  int arg2 ;
  std::vector< CommonMv > *arg3 = 0 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CommonMv > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CommonMv > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CommonMv_Sg__SetRange(arg1,arg2,(std::vector< CommonMv > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommonMvVector(void * jarg1) {
  std::vector< CommonMv > *arg1 = (std::vector< CommonMv > *) 0 ;
  
  arg1 = (std::vector< CommonMv > *)jarg1; 
  delete arg1;
}


SWIGEXPORT CommonElt * SWIGSTDCALL CSharp_CommonSyntax_SWIGUpcast(CommonSyntax *jarg1) {
    return (CommonElt *)jarg1;
}

SWIGEXPORT CommonElt * SWIGSTDCALL CSharp_CommonHeader_SWIGUpcast(CommonHeader *jarg1) {
    return (CommonElt *)jarg1;
}

SWIGEXPORT CommonElt * SWIGSTDCALL CSharp_CommonFunction_SWIGUpcast(CommonFunction *jarg1) {
    return (CommonElt *)jarg1;
}

SWIGEXPORT CommonElt * SWIGSTDCALL CSharp_CommonControl_SWIGUpcast(CommonControl *jarg1) {
    return (CommonElt *)jarg1;
}

SWIGEXPORT CommonElt * SWIGSTDCALL CSharp_CommonError_SWIGUpcast(CommonError *jarg1) {
    return (CommonElt *)jarg1;
}

SWIGEXPORT CommonElt * SWIGSTDCALL CSharp_CommonMb_SWIGUpcast(CommonMb *jarg1) {
    return (CommonElt *)jarg1;
}

SWIGEXPORT CommonMb * SWIGSTDCALL CSharp_CommonMbH264_SWIGUpcast(CommonMbH264 *jarg1) {
    return (CommonMb *)jarg1;
}

SWIGEXPORT CommonElt * SWIGSTDCALL CSharp_CommonH264Section_SWIGUpcast(CommonH264Section *jarg1) {
    return (CommonElt *)jarg1;
}

SWIGEXPORT CommonElt * SWIGSTDCALL CSharp_CommonH264Nalu_SWIGUpcast(CommonH264Nalu *jarg1) {
    return (CommonElt *)jarg1;
}

SWIGEXPORT CommonMain * SWIGSTDCALL CSharp_CommonMainH264_SWIGUpcast(CommonMainH264 *jarg1) {
    return (CommonMain *)jarg1;
}

#ifdef __cplusplus
}
#endif

