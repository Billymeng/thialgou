/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace org.doubango.thialgou.commonWRAP {

using System;
using System.Runtime.InteropServices;

class commonWRAPPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("commonWRAP", EntryPoint="SWIGRegisterExceptionCallbacks_commonWRAP")]
    public static extern void SWIGRegisterExceptionCallbacks_commonWRAP(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("commonWRAP", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_commonWRAP")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_commonWRAP(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_commonWRAP(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_commonWRAP(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(commonWRAPPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(commonWRAPPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("commonWRAP", EntryPoint="SWIGRegisterStringCallback_commonWRAP")]
    public static extern void SWIGRegisterStringCallback_commonWRAP(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_commonWRAP(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static commonWRAPPINVOKE() {
  }


  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMv_x_set")]
  public static extern void CommonMv_x_set(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMv_x_get")]
  public static extern int CommonMv_x_get(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMv_y_set")]
  public static extern void CommonMv_y_set(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMv_y_get")]
  public static extern int CommonMv_y_get(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonMv")]
  public static extern void delete_CommonMv(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonElt")]
  public static extern void delete_CommonElt(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonElt_getType")]
  public static extern int CommonElt_getType(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonElt_getElements")]
  public static extern IntPtr CommonElt_getElements(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonElt_getBitsStart")]
  public static extern string CommonElt_getBitsStart(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonElt_getBitsVal")]
  public static extern string CommonElt_getBitsVal(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonElt_getBitsCount")]
  public static extern uint CommonElt_getBitsCount(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonSyntax")]
  public static extern IntPtr new_CommonSyntax(string jarg1, string jarg2, double jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonSyntax")]
  public static extern void delete_CommonSyntax(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonSyntax_getName")]
  public static extern string CommonSyntax_getName(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonSyntax_getDescriptor")]
  public static extern string CommonSyntax_getDescriptor(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonSyntax_getValue")]
  public static extern double CommonSyntax_getValue(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonHeader")]
  public static extern IntPtr new_CommonHeader(int jarg1, string jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonHeader")]
  public static extern void delete_CommonHeader(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonHeader_getHeaderType")]
  public static extern int CommonHeader_getHeaderType(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonHeader_getFuncName")]
  public static extern string CommonHeader_getFuncName(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonFunction")]
  public static extern IntPtr new_CommonFunction(string jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonFunction")]
  public static extern void delete_CommonFunction(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonFunction_getFuncName")]
  public static extern string CommonFunction_getFuncName(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonControl")]
  public static extern IntPtr new_CommonControl(string jarg1, string jarg2, double jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonControl")]
  public static extern void delete_CommonControl(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonControl_getName")]
  public static extern string CommonControl_getName(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonControl_getExpression")]
  public static extern string CommonControl_getExpression(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonControl_getValue")]
  public static extern double CommonControl_getValue(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonError")]
  public static extern IntPtr new_CommonError(string jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonError")]
  public static extern void delete_CommonError(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonError_getDescription")]
  public static extern string CommonError_getDescription(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonMb__SWIG_0")]
  public static extern IntPtr new_CommonMb__SWIG_0(uint jarg1, uint jarg2, uint jarg3, int jarg4);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonMb__SWIG_1")]
  public static extern IntPtr new_CommonMb__SWIG_1(uint jarg1, uint jarg2, uint jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonMb")]
  public static extern void delete_CommonMb(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMb_getData")]
  public static extern IntPtr CommonMb_getData(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMb_getMbType")]
  public static extern int CommonMb_getMbType(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMb_getAddress")]
  public static extern uint CommonMb_getAddress(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMb_getX")]
  public static extern uint CommonMb_getX(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMb_getY")]
  public static extern uint CommonMb_getY(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMb_getWidth")]
  public static extern uint CommonMb_getWidth(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMb_getHeight")]
  public static extern uint CommonMb_getHeight(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonMain")]
  public static extern IntPtr new_CommonMain();

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonMain")]
  public static extern void delete_CommonMain(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMain_OnElt")]
  public static extern int CommonMain_OnElt(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMain_OnEltSwigExplicitCommonMain")]
  public static extern int CommonMain_OnEltSwigExplicitCommonMain(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMain_getCurrentPictureId")]
  public static extern uint CommonMain_getCurrentPictureId(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMain_getCurrentSliceId")]
  public static extern uint CommonMain_getCurrentSliceId(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMain_getCurrentLayerId")]
  public static extern uint CommonMain_getCurrentLayerId(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMain_setMainH264")]
  public static extern void CommonMain_setMainH264(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMain_getMainH264")]
  public static extern IntPtr CommonMain_getMainH264();

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMain_getMain")]
  public static extern IntPtr CommonMain_getMain();

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMain_director_connect")]
  public static extern void CommonMain_director_connect(HandleRef jarg1, CommonMain.SwigDelegateCommonMain_0 delegate0, CommonMain.SwigDelegateCommonMain_1 delegate1, CommonMain.SwigDelegateCommonMain_2 delegate2, CommonMain.SwigDelegateCommonMain_3 delegate3);

  [DllImport("commonWRAP", EntryPoint="CSharp_COMMON_MAX_TRACE_LAYERS_get")]
  public static extern int COMMON_MAX_TRACE_LAYERS_get();

  [DllImport("commonWRAP", EntryPoint="CSharp_COMMON_MAX_BITS_LENGTH_get")]
  public static extern int COMMON_MAX_BITS_LENGTH_get();

  [DllImport("commonWRAP", EntryPoint="CSharp_COMMON_MAX_LINE_LENGTH_get")]
  public static extern int COMMON_MAX_LINE_LENGTH_get();

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonMbH264")]
  public static extern IntPtr new_CommonMbH264(uint jarg1, uint jarg2, uint jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonMbH264")]
  public static extern void delete_CommonMbH264(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getMode")]
  public static extern int CommonMbH264_getMode(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getSliceType")]
  public static extern int CommonMbH264_getSliceType(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getIntra4x4PredMode")]
  public static extern void CommonMbH264_getIntra4x4PredMode(HandleRef jarg1, [In, MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0, ArraySubType=UnmanagedType.I8)]Intra4x4PredMode[] jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getIntraChromaPredMode")]
  public static extern int CommonMbH264_getIntraChromaPredMode(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getBlkModes")]
  public static extern void CommonMbH264_getBlkModes(HandleRef jarg1, [In, MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0, ArraySubType=UnmanagedType.I8)]BlkMode[] jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getMvdL0")]
  public static extern IntPtr CommonMbH264_getMvdL0(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getMvdL1")]
  public static extern IntPtr CommonMbH264_getMvdL1(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getMvL0")]
  public static extern IntPtr CommonMbH264_getMvL0(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getMvL1")]
  public static extern IntPtr CommonMbH264_getMvL1(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getRefIdxL0")]
  public static extern void CommonMbH264_getRefIdxL0(HandleRef jarg1, [In, MarshalAs(UnmanagedType.LPArray)]int[] jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getRefIdxL1")]
  public static extern void CommonMbH264_getRefIdxL1(HandleRef jarg1, [In, MarshalAs(UnmanagedType.LPArray)]int[] jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getPOC0")]
  public static extern void CommonMbH264_getPOC0(HandleRef jarg1, [In, MarshalAs(UnmanagedType.LPArray)]int[] jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getPOC1")]
  public static extern void CommonMbH264_getPOC1(HandleRef jarg1, [In, MarshalAs(UnmanagedType.LPArray)]int[] jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getMbType")]
  public static extern uint CommonMbH264_getMbType(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getQP")]
  public static extern int CommonMbH264_getQP(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getQPC")]
  public static extern int CommonMbH264_getQPC(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_getCBP")]
  public static extern int CommonMbH264_getCBP(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_isInter8x8")]
  public static extern bool CommonMbH264_isInter8x8(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_isIntra4x4")]
  public static extern bool CommonMbH264_isIntra4x4(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_isIntra16x16")]
  public static extern bool CommonMbH264_isIntra16x16(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_isIntra")]
  public static extern bool CommonMbH264_isIntra(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_isInCropWindow")]
  public static extern bool CommonMbH264_isInCropWindow(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_isResidualPredictionFlag")]
  public static extern bool CommonMbH264_isResidualPredictionFlag(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_isBLSkippedFlag")]
  public static extern bool CommonMbH264_isBLSkippedFlag(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonH264Section")]
  public static extern void delete_CommonH264Section(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonH264Nalu")]
  public static extern void delete_CommonH264Nalu(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonH264Nalu_getNaluType")]
  public static extern int CommonH264Nalu_getNaluType(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonH264Nalu_getLayerId")]
  public static extern uint CommonH264Nalu_getLayerId(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonH264Nalu_getPictureId")]
  public static extern uint CommonH264Nalu_getPictureId(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonH264Nalu_getSliceId")]
  public static extern uint CommonH264Nalu_getSliceId(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonMainH264")]
  public static extern IntPtr new_CommonMainH264();

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonMainH264")]
  public static extern void delete_CommonMainH264(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMainH264_getCurrentPictureId")]
  public static extern uint CommonMainH264_getCurrentPictureId(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMainH264_getCurrentPictureIdSwigExplicitCommonMainH264")]
  public static extern uint CommonMainH264_getCurrentPictureIdSwigExplicitCommonMainH264(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMainH264_getCurrentSliceId")]
  public static extern uint CommonMainH264_getCurrentSliceId(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMainH264_getCurrentSliceIdSwigExplicitCommonMainH264")]
  public static extern uint CommonMainH264_getCurrentSliceIdSwigExplicitCommonMainH264(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMainH264_getCurrentLayerId")]
  public static extern uint CommonMainH264_getCurrentLayerId(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMainH264_getCurrentLayerIdSwigExplicitCommonMainH264")]
  public static extern uint CommonMainH264_getCurrentLayerIdSwigExplicitCommonMainH264(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMainH264_director_connect")]
  public static extern void CommonMainH264_director_connect(HandleRef jarg1, CommonMainH264.SwigDelegateCommonMainH264_0 delegate0, CommonMainH264.SwigDelegateCommonMainH264_1 delegate1, CommonMainH264.SwigDelegateCommonMainH264_2 delegate2, CommonMainH264.SwigDelegateCommonMainH264_3 delegate3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_Clear")]
  public static extern void CommonEltVector_Clear(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_Add")]
  public static extern void CommonEltVector_Add(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_size")]
  public static extern uint CommonEltVector_size(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_capacity")]
  public static extern uint CommonEltVector_capacity(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_reserve")]
  public static extern void CommonEltVector_reserve(HandleRef jarg1, uint jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonEltVector__SWIG_0")]
  public static extern IntPtr new_CommonEltVector__SWIG_0();

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonEltVector__SWIG_1")]
  public static extern IntPtr new_CommonEltVector__SWIG_1(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonEltVector__SWIG_2")]
  public static extern IntPtr new_CommonEltVector__SWIG_2(int jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_getitemcopy")]
  public static extern IntPtr CommonEltVector_getitemcopy(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_getitem")]
  public static extern IntPtr CommonEltVector_getitem(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_setitem")]
  public static extern void CommonEltVector_setitem(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_AddRange")]
  public static extern void CommonEltVector_AddRange(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_GetRange")]
  public static extern IntPtr CommonEltVector_GetRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_Insert")]
  public static extern void CommonEltVector_Insert(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_InsertRange")]
  public static extern void CommonEltVector_InsertRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_RemoveAt")]
  public static extern void CommonEltVector_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_RemoveRange")]
  public static extern void CommonEltVector_RemoveRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_Repeat")]
  public static extern IntPtr CommonEltVector_Repeat(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_Reverse__SWIG_0")]
  public static extern void CommonEltVector_Reverse__SWIG_0(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_Reverse__SWIG_1")]
  public static extern void CommonEltVector_Reverse__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVector_SetRange")]
  public static extern void CommonEltVector_SetRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonEltVector")]
  public static extern void delete_CommonEltVector(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_Clear")]
  public static extern void CommonEltVectorPtr_Clear(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_Add")]
  public static extern void CommonEltVectorPtr_Add(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_size")]
  public static extern uint CommonEltVectorPtr_size(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_capacity")]
  public static extern uint CommonEltVectorPtr_capacity(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_reserve")]
  public static extern void CommonEltVectorPtr_reserve(HandleRef jarg1, uint jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonEltVectorPtr__SWIG_0")]
  public static extern IntPtr new_CommonEltVectorPtr__SWIG_0();

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonEltVectorPtr__SWIG_1")]
  public static extern IntPtr new_CommonEltVectorPtr__SWIG_1(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonEltVectorPtr__SWIG_2")]
  public static extern IntPtr new_CommonEltVectorPtr__SWIG_2(int jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_getitemcopy")]
  public static extern IntPtr CommonEltVectorPtr_getitemcopy(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_getitem")]
  public static extern IntPtr CommonEltVectorPtr_getitem(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_setitem")]
  public static extern void CommonEltVectorPtr_setitem(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_AddRange")]
  public static extern void CommonEltVectorPtr_AddRange(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_GetRange")]
  public static extern IntPtr CommonEltVectorPtr_GetRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_Insert")]
  public static extern void CommonEltVectorPtr_Insert(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_InsertRange")]
  public static extern void CommonEltVectorPtr_InsertRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_RemoveAt")]
  public static extern void CommonEltVectorPtr_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_RemoveRange")]
  public static extern void CommonEltVectorPtr_RemoveRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_Repeat")]
  public static extern IntPtr CommonEltVectorPtr_Repeat(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_Reverse__SWIG_0")]
  public static extern void CommonEltVectorPtr_Reverse__SWIG_0(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_Reverse__SWIG_1")]
  public static extern void CommonEltVectorPtr_Reverse__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_SetRange")]
  public static extern void CommonEltVectorPtr_SetRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_Contains")]
  public static extern bool CommonEltVectorPtr_Contains(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_IndexOf")]
  public static extern int CommonEltVectorPtr_IndexOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_LastIndexOf")]
  public static extern int CommonEltVectorPtr_LastIndexOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonEltVectorPtr_Remove")]
  public static extern bool CommonEltVectorPtr_Remove(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonEltVectorPtr")]
  public static extern void delete_CommonEltVectorPtr(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_Clear")]
  public static extern void CommonMbVectorPtr_Clear(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_Add")]
  public static extern void CommonMbVectorPtr_Add(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_size")]
  public static extern uint CommonMbVectorPtr_size(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_capacity")]
  public static extern uint CommonMbVectorPtr_capacity(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_reserve")]
  public static extern void CommonMbVectorPtr_reserve(HandleRef jarg1, uint jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonMbVectorPtr__SWIG_0")]
  public static extern IntPtr new_CommonMbVectorPtr__SWIG_0();

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonMbVectorPtr__SWIG_1")]
  public static extern IntPtr new_CommonMbVectorPtr__SWIG_1(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonMbVectorPtr__SWIG_2")]
  public static extern IntPtr new_CommonMbVectorPtr__SWIG_2(int jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_getitemcopy")]
  public static extern IntPtr CommonMbVectorPtr_getitemcopy(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_getitem")]
  public static extern IntPtr CommonMbVectorPtr_getitem(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_setitem")]
  public static extern void CommonMbVectorPtr_setitem(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_AddRange")]
  public static extern void CommonMbVectorPtr_AddRange(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_GetRange")]
  public static extern IntPtr CommonMbVectorPtr_GetRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_Insert")]
  public static extern void CommonMbVectorPtr_Insert(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_InsertRange")]
  public static extern void CommonMbVectorPtr_InsertRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_RemoveAt")]
  public static extern void CommonMbVectorPtr_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_RemoveRange")]
  public static extern void CommonMbVectorPtr_RemoveRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_Repeat")]
  public static extern IntPtr CommonMbVectorPtr_Repeat(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_Reverse__SWIG_0")]
  public static extern void CommonMbVectorPtr_Reverse__SWIG_0(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_Reverse__SWIG_1")]
  public static extern void CommonMbVectorPtr_Reverse__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_SetRange")]
  public static extern void CommonMbVectorPtr_SetRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_Contains")]
  public static extern bool CommonMbVectorPtr_Contains(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_IndexOf")]
  public static extern int CommonMbVectorPtr_IndexOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_LastIndexOf")]
  public static extern int CommonMbVectorPtr_LastIndexOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbVectorPtr_Remove")]
  public static extern bool CommonMbVectorPtr_Remove(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonMbVectorPtr")]
  public static extern void delete_CommonMbVectorPtr(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_Clear")]
  public static extern void CommonMvVector_Clear(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_Add")]
  public static extern void CommonMvVector_Add(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_size")]
  public static extern uint CommonMvVector_size(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_capacity")]
  public static extern uint CommonMvVector_capacity(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_reserve")]
  public static extern void CommonMvVector_reserve(HandleRef jarg1, uint jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonMvVector__SWIG_0")]
  public static extern IntPtr new_CommonMvVector__SWIG_0();

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonMvVector__SWIG_1")]
  public static extern IntPtr new_CommonMvVector__SWIG_1(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_new_CommonMvVector__SWIG_2")]
  public static extern IntPtr new_CommonMvVector__SWIG_2(int jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_getitemcopy")]
  public static extern IntPtr CommonMvVector_getitemcopy(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_getitem")]
  public static extern IntPtr CommonMvVector_getitem(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_setitem")]
  public static extern void CommonMvVector_setitem(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_AddRange")]
  public static extern void CommonMvVector_AddRange(HandleRef jarg1, HandleRef jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_GetRange")]
  public static extern IntPtr CommonMvVector_GetRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_Insert")]
  public static extern void CommonMvVector_Insert(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_InsertRange")]
  public static extern void CommonMvVector_InsertRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_RemoveAt")]
  public static extern void CommonMvVector_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_RemoveRange")]
  public static extern void CommonMvVector_RemoveRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_Repeat")]
  public static extern IntPtr CommonMvVector_Repeat(HandleRef jarg1, int jarg2);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_Reverse__SWIG_0")]
  public static extern void CommonMvVector_Reverse__SWIG_0(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_Reverse__SWIG_1")]
  public static extern void CommonMvVector_Reverse__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMvVector_SetRange")]
  public static extern void CommonMvVector_SetRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("commonWRAP", EntryPoint="CSharp_delete_CommonMvVector")]
  public static extern void delete_CommonMvVector(HandleRef jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonSyntax_SWIGUpcast")]
  public static extern IntPtr CommonSyntax_SWIGUpcast(IntPtr jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonHeader_SWIGUpcast")]
  public static extern IntPtr CommonHeader_SWIGUpcast(IntPtr jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonFunction_SWIGUpcast")]
  public static extern IntPtr CommonFunction_SWIGUpcast(IntPtr jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonControl_SWIGUpcast")]
  public static extern IntPtr CommonControl_SWIGUpcast(IntPtr jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonError_SWIGUpcast")]
  public static extern IntPtr CommonError_SWIGUpcast(IntPtr jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMb_SWIGUpcast")]
  public static extern IntPtr CommonMb_SWIGUpcast(IntPtr jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMbH264_SWIGUpcast")]
  public static extern IntPtr CommonMbH264_SWIGUpcast(IntPtr jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonH264Section_SWIGUpcast")]
  public static extern IntPtr CommonH264Section_SWIGUpcast(IntPtr jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonH264Nalu_SWIGUpcast")]
  public static extern IntPtr CommonH264Nalu_SWIGUpcast(IntPtr jarg1);

  [DllImport("commonWRAP", EntryPoint="CSharp_CommonMainH264_SWIGUpcast")]
  public static extern IntPtr CommonMainH264_SWIGUpcast(IntPtr jarg1);
}

}
