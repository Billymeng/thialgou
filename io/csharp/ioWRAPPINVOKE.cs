/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace org.doubango.thialgou.ioWRAP {

using System;
using System.Runtime.InteropServices;

class ioWRAPPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("ioWRAP", EntryPoint="SWIGRegisterExceptionCallbacks_ioWRAP")]
    public static extern void SWIGRegisterExceptionCallbacks_ioWRAP(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("ioWRAP", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_ioWRAP")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_ioWRAP(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_ioWRAP(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_ioWRAP(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(ioWRAPPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(ioWRAPPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("ioWRAP", EntryPoint="SWIGRegisterStringCallback_ioWRAP")]
    public static extern void SWIGRegisterStringCallback_ioWRAP(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_ioWRAP(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static ioWRAPPINVOKE() {
  }


  [DllImport("ioWRAP", EntryPoint="CSharp_new_h264HdrEventParsing")]
  public static extern IntPtr new_h264HdrEventParsing();

  [DllImport("ioWRAP", EntryPoint="CSharp_delete_h264HdrEventParsing")]
  public static extern void delete_h264HdrEventParsing(HandleRef jarg1);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnBeginHdr__SWIG_0")]
  public static extern int h264HdrEventParsing_OnBeginHdr__SWIG_0(HandleRef jarg1, int jarg2, string jarg3);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnBeginHdrSwigExplicith264HdrEventParsing__SWIG_0")]
  public static extern int h264HdrEventParsing_OnBeginHdrSwigExplicith264HdrEventParsing__SWIG_0(HandleRef jarg1, int jarg2, string jarg3);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnBeginHdr__SWIG_1")]
  public static extern int h264HdrEventParsing_OnBeginHdr__SWIG_1(HandleRef jarg1, int jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnBeginHdrSwigExplicith264HdrEventParsing__SWIG_1")]
  public static extern int h264HdrEventParsing_OnBeginHdrSwigExplicith264HdrEventParsing__SWIG_1(HandleRef jarg1, int jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnEndHdr")]
  public static extern int h264HdrEventParsing_OnEndHdr(HandleRef jarg1, int jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnEndHdrSwigExplicith264HdrEventParsing")]
  public static extern int h264HdrEventParsing_OnEndHdrSwigExplicith264HdrEventParsing(HandleRef jarg1, int jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnErrorHdr")]
  public static extern int h264HdrEventParsing_OnErrorHdr(HandleRef jarg1, int jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnErrorHdrSwigExplicith264HdrEventParsing")]
  public static extern int h264HdrEventParsing_OnErrorHdrSwigExplicith264HdrEventParsing(HandleRef jarg1, int jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnBeginFunc")]
  public static extern int h264HdrEventParsing_OnBeginFunc(HandleRef jarg1, string jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnBeginFuncSwigExplicith264HdrEventParsing")]
  public static extern int h264HdrEventParsing_OnBeginFuncSwigExplicith264HdrEventParsing(HandleRef jarg1, string jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnEndFunc")]
  public static extern int h264HdrEventParsing_OnEndFunc(HandleRef jarg1, string jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnEndFuncSwigExplicith264HdrEventParsing")]
  public static extern int h264HdrEventParsing_OnEndFuncSwigExplicith264HdrEventParsing(HandleRef jarg1, string jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnSyntaxElt")]
  public static extern int h264HdrEventParsing_OnSyntaxElt(HandleRef jarg1, string jarg2, string jarg3, int jarg4);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnSyntaxEltSwigExplicith264HdrEventParsing")]
  public static extern int h264HdrEventParsing_OnSyntaxEltSwigExplicith264HdrEventParsing(HandleRef jarg1, string jarg2, string jarg3, int jarg4);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnBeginCtrl")]
  public static extern int h264HdrEventParsing_OnBeginCtrl(HandleRef jarg1, string jarg2, string jarg3, int jarg4);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnBeginCtrlSwigExplicith264HdrEventParsing")]
  public static extern int h264HdrEventParsing_OnBeginCtrlSwigExplicith264HdrEventParsing(HandleRef jarg1, string jarg2, string jarg3, int jarg4);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnEndCtrl")]
  public static extern int h264HdrEventParsing_OnEndCtrl(HandleRef jarg1, string jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnEndCtrlSwigExplicith264HdrEventParsing")]
  public static extern int h264HdrEventParsing_OnEndCtrlSwigExplicith264HdrEventParsing(HandleRef jarg1, string jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnFrameDraw")]
  public static extern int h264HdrEventParsing_OnFrameDraw(HandleRef jarg1, IntPtr jarg2, IntPtr jarg3, IntPtr jarg4, uint jarg5, uint jarg6, uint jarg7);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_OnFrameDrawSwigExplicith264HdrEventParsing")]
  public static extern int h264HdrEventParsing_OnFrameDrawSwigExplicith264HdrEventParsing(HandleRef jarg1, IntPtr jarg2, IntPtr jarg3, IntPtr jarg4, uint jarg5, uint jarg6, uint jarg7);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264HdrEventParsing_director_connect")]
  public static extern void h264HdrEventParsing_director_connect(HandleRef jarg1, h264HdrEventParsing.SwigDelegateh264HdrEventParsing_0 delegate0, h264HdrEventParsing.SwigDelegateh264HdrEventParsing_1 delegate1, h264HdrEventParsing.SwigDelegateh264HdrEventParsing_2 delegate2, h264HdrEventParsing.SwigDelegateh264HdrEventParsing_3 delegate3, h264HdrEventParsing.SwigDelegateh264HdrEventParsing_4 delegate4, h264HdrEventParsing.SwigDelegateh264HdrEventParsing_5 delegate5, h264HdrEventParsing.SwigDelegateh264HdrEventParsing_6 delegate6, h264HdrEventParsing.SwigDelegateh264HdrEventParsing_7 delegate7, h264HdrEventParsing.SwigDelegateh264HdrEventParsing_8 delegate8, h264HdrEventParsing.SwigDelegateh264HdrEventParsing_9 delegate9);

  [DllImport("ioWRAP", EntryPoint="CSharp_new_h264Decoder")]
  public static extern IntPtr new_h264Decoder(string jarg1, string jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_delete_h264Decoder")]
  public static extern void delete_h264Decoder(HandleRef jarg1);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264Decoder_IsInitialized")]
  public static extern bool h264Decoder_IsInitialized(HandleRef jarg1);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264Decoder_SetIoEventHdr")]
  public static extern bool h264Decoder_SetIoEventHdr(HandleRef jarg1, HandleRef jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_h264Decoder_Decode")]
  public static extern bool h264Decoder_Decode(HandleRef jarg1, uint jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_new_VideoConverter")]
  public static extern IntPtr new_VideoConverter(int jarg1, int jarg2);

  [DllImport("ioWRAP", EntryPoint="CSharp_delete_VideoConverter")]
  public static extern void delete_VideoConverter(HandleRef jarg1);

  [DllImport("ioWRAP", EntryPoint="CSharp_new_VideoConverterYUV420ToRGB32")]
  public static extern IntPtr new_VideoConverterYUV420ToRGB32();

  [DllImport("ioWRAP", EntryPoint="CSharp_delete_VideoConverterYUV420ToRGB32")]
  public static extern void delete_VideoConverterYUV420ToRGB32(HandleRef jarg1);

  [DllImport("ioWRAP", EntryPoint="CSharp_VideoConverterYUV420ToRGB32_convert")]
  public static extern bool VideoConverterYUV420ToRGB32_convert(IntPtr jarg1, IntPtr jarg2, IntPtr jarg3, uint jarg4, uint jarg5, uint jarg6, IntPtr jarg7, uint jarg8);

  [DllImport("ioWRAP", EntryPoint="CSharp_new_Md5")]
  public static extern IntPtr new_Md5();

  [DllImport("ioWRAP", EntryPoint="CSharp_delete_Md5")]
  public static extern void delete_Md5(HandleRef jarg1);

  [DllImport("ioWRAP", EntryPoint="CSharp_Md5_init")]
  public static extern void Md5_init(HandleRef jarg1);

  [DllImport("ioWRAP", EntryPoint="CSharp_Md5_update")]
  public static extern void Md5_update(HandleRef jarg1, IntPtr jarg2, uint jarg3);

  [DllImport("ioWRAP", EntryPoint="CSharp_Md5_final")]
  public static extern string Md5_final(HandleRef jarg1);

  [DllImport("ioWRAP", EntryPoint="CSharp_Md5_compute")]
  public static extern string Md5_compute(HandleRef jarg1, IntPtr jarg2, uint jarg3);

  [DllImport("ioWRAP", EntryPoint="CSharp_VideoConverterYUV420ToRGB32_SWIGUpcast")]
  public static extern IntPtr VideoConverterYUV420ToRGB32_SWIGUpcast(IntPtr jarg1);
}

}
