/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_ioWRAP(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_ioWRAP(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_ioWRAP(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



#include <stdint.h>		// Use the C99 official header


#include "H264AVCCommonLib/IoEvent.h"
#include "cpp/common/io_converter_video.h"
#include "cpp/common/io_md5.h"
#include "cpp/h264/h264_decoder.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ioWRAP.h"

SwigDirector_h264HdrEventParsing::SwigDirector_h264HdrEventParsing() : h264HdrEventParsing(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_h264HdrEventParsing::~SwigDirector_h264HdrEventParsing() {
  
}


int SwigDirector_h264HdrEventParsing::OnBeginHdr(h264HdrType_t eType, char const *pFuncName) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  int jeType  ;
  char * jpFuncName = 0 ;
  
  if (!swig_callbackOnBeginHdr__SWIG_0) {
    return h264HdrEventParsing::OnBeginHdr(eType,pFuncName);
  } else {
    jeType = eType;
    jpFuncName = SWIG_csharp_string_callback((const char *)pFuncName); 
    jresult = (int) swig_callbackOnBeginHdr__SWIG_0(jeType, jpFuncName);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_h264HdrEventParsing::OnEndHdr(h264HdrType_t eType) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  int jeType  ;
  
  if (!swig_callbackOnEndHdr) {
    return h264HdrEventParsing::OnEndHdr(eType);
  } else {
    jeType = eType;
    jresult = (int) swig_callbackOnEndHdr(jeType);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_h264HdrEventParsing::OnErrorHdr(h264HdrType_t eType) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  int jeType  ;
  
  if (!swig_callbackOnErrorHdr) {
    return h264HdrEventParsing::OnErrorHdr(eType);
  } else {
    jeType = eType;
    jresult = (int) swig_callbackOnErrorHdr(jeType);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_h264HdrEventParsing::OnBeginFunc(char const *pFuncName) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char * jpFuncName = 0 ;
  
  if (!swig_callbackOnBeginFunc) {
    return h264HdrEventParsing::OnBeginFunc(pFuncName);
  } else {
    jpFuncName = SWIG_csharp_string_callback((const char *)pFuncName); 
    jresult = (int) swig_callbackOnBeginFunc(jpFuncName);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_h264HdrEventParsing::OnEndFunc(char const *pFuncName) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char * jpFuncName = 0 ;
  
  if (!swig_callbackOnEndFunc) {
    return h264HdrEventParsing::OnEndFunc(pFuncName);
  } else {
    jpFuncName = SWIG_csharp_string_callback((const char *)pFuncName); 
    jresult = (int) swig_callbackOnEndFunc(jpFuncName);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_h264HdrEventParsing::OnSyntaxElt(char const *pName, char const *pDescriptor, int value) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char * jpName = 0 ;
  char * jpDescriptor = 0 ;
  int jvalue  ;
  
  if (!swig_callbackOnSyntaxElt) {
    return h264HdrEventParsing::OnSyntaxElt(pName,pDescriptor,value);
  } else {
    jpName = SWIG_csharp_string_callback((const char *)pName); 
    jpDescriptor = SWIG_csharp_string_callback((const char *)pDescriptor); 
    jvalue = value;
    jresult = (int) swig_callbackOnSyntaxElt(jpName, jpDescriptor, jvalue);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_h264HdrEventParsing::OnBeginCtrl(char const *pName, char const *pExpression, int value) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char * jpName = 0 ;
  char * jpExpression = 0 ;
  int jvalue  ;
  
  if (!swig_callbackOnBeginCtrl) {
    return h264HdrEventParsing::OnBeginCtrl(pName,pExpression,value);
  } else {
    jpName = SWIG_csharp_string_callback((const char *)pName); 
    jpExpression = SWIG_csharp_string_callback((const char *)pExpression); 
    jvalue = value;
    jresult = (int) swig_callbackOnBeginCtrl(jpName, jpExpression, jvalue);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_h264HdrEventParsing::OnEndCtrl(char const *pName) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char * jpName = 0 ;
  
  if (!swig_callbackOnEndCtrl) {
    return h264HdrEventParsing::OnEndCtrl(pName);
  } else {
    jpName = SWIG_csharp_string_callback((const char *)pName); 
    jresult = (int) swig_callbackOnEndCtrl(jpName);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_h264HdrEventParsing::OnFrameDraw(void const *pLum, void const *pCb, void const *pCr, unsigned int uiWidth, unsigned int uiHeight, unsigned int uiStride) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpLum = 0 ;
  void * jpCb = 0 ;
  void * jpCr = 0 ;
  unsigned int juiWidth  ;
  unsigned int juiHeight  ;
  unsigned int juiStride  ;
  
  if (!swig_callbackOnFrameDraw) {
    return h264HdrEventParsing::OnFrameDraw(pLum,pCb,pCr,uiWidth,uiHeight,uiStride);
  } else {
    jpLum = (void *) pLum; 
    jpCb = (void *) pCb; 
    jpCr = (void *) pCr; 
    juiWidth = uiWidth;
    juiHeight = uiHeight;
    juiStride = uiStride;
    jresult = (int) swig_callbackOnFrameDraw(jpLum, jpCb, jpCr, juiWidth, juiHeight, juiStride);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_h264HdrEventParsing::swig_connect_director(SWIG_Callback0_t callbackOnBeginHdr__SWIG_0, SWIG_Callback1_t callbackOnBeginHdr__SWIG_1, SWIG_Callback2_t callbackOnEndHdr, SWIG_Callback3_t callbackOnErrorHdr, SWIG_Callback4_t callbackOnBeginFunc, SWIG_Callback5_t callbackOnEndFunc, SWIG_Callback6_t callbackOnSyntaxElt, SWIG_Callback7_t callbackOnBeginCtrl, SWIG_Callback8_t callbackOnEndCtrl, SWIG_Callback9_t callbackOnFrameDraw) {
  swig_callbackOnBeginHdr__SWIG_0 = callbackOnBeginHdr__SWIG_0;
  swig_callbackOnBeginHdr__SWIG_1 = callbackOnBeginHdr__SWIG_1;
  swig_callbackOnEndHdr = callbackOnEndHdr;
  swig_callbackOnErrorHdr = callbackOnErrorHdr;
  swig_callbackOnBeginFunc = callbackOnBeginFunc;
  swig_callbackOnEndFunc = callbackOnEndFunc;
  swig_callbackOnSyntaxElt = callbackOnSyntaxElt;
  swig_callbackOnBeginCtrl = callbackOnBeginCtrl;
  swig_callbackOnEndCtrl = callbackOnEndCtrl;
  swig_callbackOnFrameDraw = callbackOnFrameDraw;
}

void SwigDirector_h264HdrEventParsing::swig_init_callbacks() {
  swig_callbackOnBeginHdr__SWIG_0 = 0;
  swig_callbackOnBeginHdr__SWIG_1 = 0;
  swig_callbackOnEndHdr = 0;
  swig_callbackOnErrorHdr = 0;
  swig_callbackOnBeginFunc = 0;
  swig_callbackOnEndFunc = 0;
  swig_callbackOnSyntaxElt = 0;
  swig_callbackOnBeginCtrl = 0;
  swig_callbackOnEndCtrl = 0;
  swig_callbackOnFrameDraw = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_h264HdrEventParsing() {
  void * jresult ;
  h264HdrEventParsing *result = 0 ;
  
  result = (h264HdrEventParsing *)new SwigDirector_h264HdrEventParsing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_h264HdrEventParsing(void * jarg1) {
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnBeginHdr__SWIG_0(void * jarg1, int jarg2, char * jarg3) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  h264HdrType_t arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (h264HdrType_t)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)((h264HdrEventParsing const *)arg1)->OnBeginHdr(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnBeginHdrSwigExplicith264HdrEventParsing__SWIG_0(void * jarg1, int jarg2, char * jarg3) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  h264HdrType_t arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (h264HdrType_t)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)((h264HdrEventParsing const *)arg1)->h264HdrEventParsing::OnBeginHdr(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnBeginHdr__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  h264HdrType_t arg2 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (h264HdrType_t)jarg2; 
  result = (int)((h264HdrEventParsing const *)arg1)->OnBeginHdr(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnBeginHdrSwigExplicith264HdrEventParsing__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  h264HdrType_t arg2 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (h264HdrType_t)jarg2; 
  result = (int)((h264HdrEventParsing const *)arg1)->h264HdrEventParsing::OnBeginHdr(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnEndHdr(void * jarg1, int jarg2) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  h264HdrType_t arg2 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (h264HdrType_t)jarg2; 
  result = (int)((h264HdrEventParsing const *)arg1)->OnEndHdr(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnEndHdrSwigExplicith264HdrEventParsing(void * jarg1, int jarg2) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  h264HdrType_t arg2 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (h264HdrType_t)jarg2; 
  result = (int)((h264HdrEventParsing const *)arg1)->h264HdrEventParsing::OnEndHdr(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnErrorHdr(void * jarg1, int jarg2) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  h264HdrType_t arg2 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (h264HdrType_t)jarg2; 
  result = (int)((h264HdrEventParsing const *)arg1)->OnErrorHdr(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnErrorHdrSwigExplicith264HdrEventParsing(void * jarg1, int jarg2) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  h264HdrType_t arg2 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (h264HdrType_t)jarg2; 
  result = (int)((h264HdrEventParsing const *)arg1)->h264HdrEventParsing::OnErrorHdr(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnBeginFunc(void * jarg1, char * jarg2) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((h264HdrEventParsing const *)arg1)->OnBeginFunc((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnBeginFuncSwigExplicith264HdrEventParsing(void * jarg1, char * jarg2) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((h264HdrEventParsing const *)arg1)->h264HdrEventParsing::OnBeginFunc((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnEndFunc(void * jarg1, char * jarg2) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((h264HdrEventParsing const *)arg1)->OnEndFunc((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnEndFuncSwigExplicith264HdrEventParsing(void * jarg1, char * jarg2) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((h264HdrEventParsing const *)arg1)->h264HdrEventParsing::OnEndFunc((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnSyntaxElt(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)((h264HdrEventParsing const *)arg1)->OnSyntaxElt((char const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnSyntaxEltSwigExplicith264HdrEventParsing(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)((h264HdrEventParsing const *)arg1)->h264HdrEventParsing::OnSyntaxElt((char const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnBeginCtrl(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)((h264HdrEventParsing const *)arg1)->OnBeginCtrl((char const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnBeginCtrlSwigExplicith264HdrEventParsing(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)((h264HdrEventParsing const *)arg1)->h264HdrEventParsing::OnBeginCtrl((char const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnEndCtrl(void * jarg1, char * jarg2) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((h264HdrEventParsing const *)arg1)->OnEndCtrl((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnEndCtrlSwigExplicith264HdrEventParsing(void * jarg1, char * jarg2) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((h264HdrEventParsing const *)arg1)->h264HdrEventParsing::OnEndCtrl((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnFrameDraw(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  result = (int)((h264HdrEventParsing const *)arg1)->OnFrameDraw((void const *)arg2,(void const *)arg3,(void const *)arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_h264HdrEventParsing_OnFrameDrawSwigExplicith264HdrEventParsing(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  int jresult ;
  h264HdrEventParsing *arg1 = (h264HdrEventParsing *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  int result;
  
  arg1 = (h264HdrEventParsing *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  result = (int)((h264HdrEventParsing const *)arg1)->h264HdrEventParsing::OnFrameDraw((void const *)arg2,(void const *)arg3,(void const *)arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_h264HdrEventParsing_director_connect(void *objarg, SwigDirector_h264HdrEventParsing::SWIG_Callback0_t callback0, SwigDirector_h264HdrEventParsing::SWIG_Callback1_t callback1, SwigDirector_h264HdrEventParsing::SWIG_Callback2_t callback2, SwigDirector_h264HdrEventParsing::SWIG_Callback3_t callback3, SwigDirector_h264HdrEventParsing::SWIG_Callback4_t callback4, SwigDirector_h264HdrEventParsing::SWIG_Callback5_t callback5, SwigDirector_h264HdrEventParsing::SWIG_Callback6_t callback6, SwigDirector_h264HdrEventParsing::SWIG_Callback7_t callback7, SwigDirector_h264HdrEventParsing::SWIG_Callback8_t callback8, SwigDirector_h264HdrEventParsing::SWIG_Callback9_t callback9) {
  h264HdrEventParsing *obj = (h264HdrEventParsing *)objarg;
  SwigDirector_h264HdrEventParsing *director = dynamic_cast<SwigDirector_h264HdrEventParsing *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_h264Decoder(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  h264Decoder *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (h264Decoder *)new h264Decoder((char const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_h264Decoder(void * jarg1) {
  h264Decoder *arg1 = (h264Decoder *) 0 ;
  
  arg1 = (h264Decoder *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_h264Decoder_IsInitialized(void * jarg1) {
  unsigned int jresult ;
  h264Decoder *arg1 = (h264Decoder *) 0 ;
  bool result;
  
  arg1 = (h264Decoder *)jarg1; 
  result = (bool)(arg1)->IsInitialized();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_h264Decoder_SetIoEventHdr(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  h264Decoder *arg1 = (h264Decoder *) 0 ;
  h264HdrEventParsing *arg2 = (h264HdrEventParsing *) 0 ;
  bool result;
  
  arg1 = (h264Decoder *)jarg1; 
  arg2 = (h264HdrEventParsing *)jarg2; 
  result = (bool)(arg1)->SetIoEventHdr((h264HdrEventParsing const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_h264Decoder_Decode(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  h264Decoder *arg1 = (h264Decoder *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  arg1 = (h264Decoder *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (bool)(arg1)->Decode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoConverter(int jarg1, int jarg2) {
  void * jresult ;
  VideoChroma_t arg1 ;
  VideoChroma_t arg2 ;
  VideoConverter *result = 0 ;
  
  arg1 = (VideoChroma_t)jarg1; 
  arg2 = (VideoChroma_t)jarg2; 
  result = (VideoConverter *)new VideoConverter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoConverter(void * jarg1) {
  VideoConverter *arg1 = (VideoConverter *) 0 ;
  
  arg1 = (VideoConverter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoConverterYUV420ToRGB32() {
  void * jresult ;
  VideoConverterYUV420ToRGB32 *result = 0 ;
  
  result = (VideoConverterYUV420ToRGB32 *)new VideoConverterYUV420ToRGB32();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoConverterYUV420ToRGB32(void * jarg1) {
  VideoConverterYUV420ToRGB32 *arg1 = (VideoConverterYUV420ToRGB32 *) 0 ;
  
  arg1 = (VideoConverterYUV420ToRGB32 *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoConverterYUV420ToRGB32_convert(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  void *arg7 = (void *) 0 ;
  unsigned int arg8 ;
  bool result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = jarg7; 
  arg8 = (unsigned int)jarg8; 
  result = (bool)VideoConverterYUV420ToRGB32::convert((void const *)arg1,(void const *)arg2,(void const *)arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Md5() {
  void * jresult ;
  Md5 *result = 0 ;
  
  result = (Md5 *)new Md5();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Md5(void * jarg1) {
  Md5 *arg1 = (Md5 *) 0 ;
  
  arg1 = (Md5 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Md5_init(void * jarg1) {
  Md5 *arg1 = (Md5 *) 0 ;
  
  arg1 = (Md5 *)jarg1; 
  (arg1)->init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Md5_update(void * jarg1, void * jarg2, unsigned long jarg3) {
  Md5 *arg1 = (Md5 *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  
  arg1 = (Md5 *)jarg1; 
  arg2 = jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->update((void const *)arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Md5_final(void * jarg1) {
  char * jresult ;
  Md5 *arg1 = (Md5 *) 0 ;
  char *result = 0 ;
  
  arg1 = (Md5 *)jarg1; 
  result = (char *)(arg1)->final();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Md5_compute(void * jarg1, void * jarg2, unsigned long jarg3) {
  char * jresult ;
  Md5 *arg1 = (Md5 *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  char *result = 0 ;
  
  arg1 = (Md5 *)jarg1; 
  arg2 = jarg2; 
  arg3 = (size_t)jarg3; 
  result = (char *)(arg1)->compute((void const *)arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT VideoConverter * SWIGSTDCALL CSharp_VideoConverterYUV420ToRGB32_SWIGUpcast(VideoConverterYUV420ToRGB32 *jarg1) {
    return (VideoConverter *)jarg1;
}

#ifdef __cplusplus
}
#endif

